/*
 * Copyright (c) 2025 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://edgeimpulse.com/legal/terms-of-service) or Enterprise Terms of
 * Service (https://edgeimpulse.com/legal/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 26.05.2025 21:40:11

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#if defined(EI_MODEL_SECTION) && (defined(__GNUC__) || defined(__clang__))
#define MODEL_SECTION(X) __attribute__((section(STRINGIZE_VALUE_OF(X))))
#else
#define MODEL_SECTION(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 1456;
#else
constexpr int kTensorArenaSize = 432;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<2, int> tensor_dimension0 = { 2, { 1,84 } };
const TfArray<1, float> quant0_scale = { 1, { 0.11606027185916901, } };
const TfArray<1, int> quant0_zero = { 1, { -111 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(8) int32_t tensor_data1[3] = { -146, 218, -13, };
const TfArray<1, int> tensor_dimension1 = { 1, { 3 } };
const TfArray<1, float> quant1_scale = { 1, { 0.00027516868431121111, } };
const TfArray<1, int> quant1_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant1 = { (TfLiteFloatArray*)&quant1_scale, (TfLiteIntArray*)&quant1_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data2[3*10] = { 
  57, 1, 88, -84, -23, 42, 65, -83, -110, 70, 
  70, 64, -61, -61, -116, 10, 40, -73, 20, -18, 
  -90, -23, 127, 3, -66, -77, -84, -44, 96, 28, 
};
const TfArray<2, int> tensor_dimension2 = { 2, { 3,10 } };
const TfArray<1, float> quant2_scale = { 1, { 0.0066671720705926418, } };
const TfArray<1, int> quant2_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data3[10] = { -27, 168, 339, 83, 100, 66, -29, 18, 140, -181, };
const TfArray<1, int> tensor_dimension3 = { 1, { 10 } };
const TfArray<1, float> quant3_scale = { 1, { 0.00020811699505429715, } };
const TfArray<1, int> quant3_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data4[10*20] = { 
  48, -57, -48, 14, 75, 10, 127, -116, -13, -38, 11, 7, 61, 84, 82, -74, 3, -13, -55, 19, 
  -31, -82, 53, 52, 42, -26, -32, -71, -72, 14, -34, -41, 58, 16, 58, 77, -39, 32, -34, -24, 
  -19, -64, 12, 95, -31, -2, -38, 81, -32, -2, 40, 61, -17, -60, 21, -2, 83, -52, -78, -63, 
  36, 12, 71, 1, -48, 63, -76, -3, -13, 54, 87, 44, -57, -68, -48, -20, -14, -46, 82, 65, 
  -41, 29, -80, -42, -63, 59, -18, 70, -71, 53, 84, 55, -16, 38, 62, -78, -50, 70, 56, 45, 
  -61, 67, -48, 48, -31, -77, 33, 73, -104, -36, 51, 44, -36, 50, 34, -35, -10, 62, -53, 3, 
  82, 56, -37, -48, 59, 58, 42, -54, -28, 5, 40, 26, -48, -33, 50, -23, 70, 4, -13, -27, 
  -26, 53, 25, 35, -6, 69, 33, -57, 98, -25, -36, 95, 45, -19, -120, 45, 45, -11, 10, 65, 
  54, 37, 44, 37, 73, 30, -101, 5, -17, 5, 84, 20, -9, -79, -70, 94, -61, 55, -37, -25, 
  10, -58, -7, 3, 54, 73, -21, 57, 60, -67, -49, 44, -61, -36, 84, -34, -7, 75, 2, 60, 
};
const TfArray<2, int> tensor_dimension4 = { 2, { 10,20 } };
const TfArray<1, float> quant4_scale = { 1, { 0.0049291616305708885, } };
const TfArray<1, int> quant4_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data5[20] = { 58, 10, -39, -33, -20, 2, 131, 175, 6, -63, 155, 44, 31, -35, 211, 77, 57, 63, 0, 0, };
const TfArray<1, int> tensor_dimension5 = { 1, { 20 } };
const TfArray<1, float> quant5_scale = { 1, { 0.00048347088159061968, } };
const TfArray<1, int> quant5_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data6[20*84] = { 
  13, 18, 14, 91, 60, -17, -28, -76, 3, -90, -48, -24, -14, -64, 0, 79, 39, 67, -8, -48, 26, -19, 47, -32, -54, -6, 4, -13, -27, -22, 43, 19, 32, -51, -60, 72, -27, 38, -30, -40, -7, -37, -18, 6, -39, 30, -34, 63, -19, -41, -10, -56, 22, -15, -39, 37, 78, 87, 104, 30, -28, 26, 55, -87, -15, 0, 49, 58, 91, -54, 11, -31, -28, -56, -48, 6, 80, 26, -8, 89, 18, 40, 16, 34, 
  -54, 0, 50, 9, -15, 9, 17, 17, 26, 51, -39, 22, 12, 9, 36, -30, 44, 28, 57, -34, -9, -6, 47, -11, 29, 27, -26, 46, -12, -39, -6, 50, 48, 58, 40, -11, -32, -3, 16, -24, -30, -34, 58, 44, 35, -15, 42, -39, 5, 0, -52, -7, 2, -21, -15, -64, -52, 49, 52, -47, -14, 43, -20, -7, -3, 3, 46, -54, 35, -21, 53, -30, 34, -6, 7, 49, -16, -32, -4, 51, -7, -57, -37, 2, 
  33, -8, -49, -36, 15, -33, 32, 42, 59, -9, -47, 5, -36, 21, -38, 38, 15, 33, 1, 24, 57, -53, 31, -43, 7, -13, 52, 25, -33, -43, -27, 35, 27, -34, -10, -14, -49, -2, 37, -42, 23, 22, -56, -10, 16, -12, -30, -45, 21, -15, 29, -12, -10, -1, 24, -55, 3, 9, 7, -11, 43, -20, -10, 3, -10, 30, 10, -35, -11, -27, -7, -59, 0, 48, -10, -48, -48, 31, -28, -36, 24, -33, 26, -5, 
  -50, 28, -32, 35, -6, 33, -6, 52, 30, -49, 46, 45, 32, 29, 19, -13, -47, -28, 19, 36, -37, 23, -37, -21, 34, 30, -45, 31, 44, 37, -25, 23, 47, -22, 35, 6, 56, -54, 13, 40, -52, 29, -2, 43, 51, -44, -3, -36, 34, 26, -37, -2, -11, -57, 9, -49, -52, -57, -24, -3, 48, 17, 51, 35, -33, -55, 29, -53, -31, -57, 29, -33, -34, -41, 12, 20, -14, 57, 20, 54, 11, 35, 44, -22, 
  45, 15, 13, -7, -17, -71, 19, -42, -35, 5, -46, -18, 0, -25, -33, 39, 41, 60, 15, -34, -27, 44, -12, -36, -21, -24, 73, 38, -54, -39, 33, -25, 61, -54, -32, 5, -11, -65, -8, 20, -22, 11, -41, -19, 31, -44, 32, 43, -2, 37, 36, 33, -45, -23, -15, 50, 42, 71, 82, 37, -89, -13, 86, 17, 5, 54, 8, 78, -25, -49, -57, 16, 36, -15, -10, 60, 16, -16, -28, 12, 46, -21, 34, -39, 
  -21, 33, 1, -30, -44, -19, 31, 78, -18, 39, -24, 6, -73, 38, 14, -11, -59, 1, -30, 18, -32, -44, -5, -6, 43, 7, -4, -14, -30, 46, -21, -4, 47, -36, 13, -74, 34, -34, 30, 49, 54, 34, -37, -24, 7, -48, -35, -46, -10, 36, 50, -13, 19, -28, 18, 32, 12, -24, 13, 2, 38, -74, 17, -18, -16, -14, -40, 31, 22, 52, 66, -31, 38, -22, -38, -56, -27, -8, 36, -19, -47, 2, -42, 35, 
  38, -8, -12, 1, 7, -90, -53, 20, -44, -28, -40, -37, -14, 60, 43, 8, 1, 3, 85, 14, -57, -1, -26, 2, -28, -40, 55, -35, 59, 26, 50, -35, 16, -30, -61, 66, -37, 7, -74, 40, 15, 36, 18, 10, -13, -57, 43, -21, 6, -13, -38, 34, -50, 22, 1, 7, 24, 86, 74, -34, -75, 49, 85, -68, 12, 49, -8, 70, -16, -64, 27, 65, -5, -15, -22, 73, 68, 46, 25, 17, 50, 77, -24, 22, 
  59, -58, 14, -18, -8, 80, 79, 81, -7, 113, 51, 120, -66, 40, -20, -60, -19, -72, -71, 86, 84, -29, -30, 57, -10, 112, -48, 24, -37, -16, 4, 22, -15, -19, 16, -102, -14, 48, 85, 13, 25, 42, 60, 57, 37, 5, 23, -59, -47, 29, -39, 4, -11, 28, -16, -12, -47, 3, -5, -80, 22, -59, -13, 29, 8, -6, -25, -45, -94, 127, -8, 21, 10, 67, 41, -32, -65, 32, -30, -19, 52, -103, 10, 3, 
  34, 58, 37, -31, -71, 57, 15, -20, 1, 13, 26, 57, 40, -39, 9, -25, 19, -41, 45, 24, 66, 40, 51, 38, 36, 51, 19, -4, 50, -48, 34, -69, -22, 15, -32, -30, -54, 63, -18, 20, -47, -43, -43, -19, -49, 15, -20, -7, -29, 17, -53, -60, 57, -40, 23, 25, 6, 19, -17, -23, 51, -26, 35, -7, 3, -65, 35, 31, 20, -13, -10, -16, 12, -34, -7, -62, -53, -26, -32, 34, -29, -47, -28, -38, 
  -54, 30, -44, -8, -42, 40, -46, -11, -28, -52, -42, -34, -48, -24, -44, 43, -13, 30, 37, -33, -8, 36, 11, 61, 58, 47, 1, 11, -8, 31, -21, -23, -49, 6, 45, 22, 34, 49, -1, 14, 4, 14, -39, 16, -31, -60, 35, 25, 51, -44, 29, 61, -55, -47, -27, 3, 26, 6, -53, 25, -59, -38, -46, 36, 8, -21, -61, -24, -32, 16, -43, 32, 43, 3, -11, -43, 51, -16, -57, 38, 29, 54, -41, -41, 
  74, 31, 44, -83, -71, 4, 60, 5, 6, 46, -15, 44, 28, -62, 39, -16, 15, -20, 4, 29, -30, 29, -52, 67, 48, 12, -20, -1, 59, 56, -37, -66, -65, 8, 78, 61, -3, -24, -22, 37, 8, -24, 21, 0, -1, 27, -5, -44, 46, 24, -18, -19, -11, 13, 49, 66, -20, -10, 26, -27, 7, 32, 48, 43, -1, -41, -39, 40, 7, 20, 53, 25, 6, -32, -8, 58, 24, -37, 26, 66, -23, -30, 31, -21, 
  -11, 4, 35, -63, -90, -4, 103, 9, 53, 33, 97, 99, 11, 70, -15, 9, -34, -46, 34, 21, 9, -8, 55, 45, 19, 66, 9, 20, 56, 5, -22, -12, 5, -22, 20, -45, -40, 16, 33, 32, 47, 61, 46, -22, -29, -6, 23, 16, -62, -5, -43, 40, 17, 20, 49, 35, 17, -38, -24, -54, 79, 0, -34, 22, 38, 12, 6, -37, -49, 24, -32, -4, -29, -5, 73, -12, -4, 47, 25, -18, 23, 24, -68, -39, 
  -23, -51, 4, -20, 31, -46, -32, -62, -53, 30, -12, -50, 18, 26, -16, 46, 11, -19, 47, -16, 27, 32, -36, 36, 29, -18, 11, -28, 52, -11, -20, 10, -60, 55, 40, 35, 37, -33, -44, -31, 4, 5, -43, -25, -54, -23, 52, 32, -8, 57, 38, -50, -57, 11, -41, -60, -35, 21, -8, 22, -23, -38, -40, 30, 2, 18, 41, 25, 12, 36, 2, -23, 30, 36, 15, -56, -22, 43, -49, -47, 9, 27, 59, 41, 
  8, -65, -39, 6, 61, 46, -57, 55, -10, 4, 1, 6, 31, 28, -12, -47, -61, -1, -38, -30, -52, -48, -3, -24, -25, -63, -19, 44, -15, -3, 10, -47, -34, -64, -16, 13, 24, -13, 37, -26, 73, 40, 40, -49, 43, -21, 3, 26, 50, 33, 18, 22, -42, -32, 58, -26, 4, 33, 23, -6, 0, -23, -12, -50, 40, 41, 44, 42, 16, 49, -54, -16, 31, -10, 28, -43, -32, -26, 27, -36, -23, 23, -33, -23, 
  65, -60, -43, 17, 52, -46, -38, 47, -10, 9, 40, -66, -97, 110, -36, -22, -28, 24, 45, -59, 32, 55, -29, 25, -54, -50, -25, -21, 61, -28, 46, -14, -9, -14, -20, -64, -37, -1, 21, -67, -8, 101, -40, 30, 12, 48, -13, -46, -68, -25, -11, 8, 18, -28, -41, -4, 65, -22, 44, -57, 53, 32, -24, 87, -16, 73, 67, 57, -42, 65, 26, -21, 71, -21, 58, 18, -27, 15, -2, 2, 30, 3, -86, -13, 
  9, 57, -34, -75, -74, 37, 14, 20, 25, 40, 19, 43, -32, 14, 35, 51, 15, 7, 3, 51, -35, 55, -47, 44, 17, 19, -9, -12, -2, -24, 23, -33, -34, 44, 9, 0, -3, -39, 31, 64, 23, -38, 26, -32, 49, -41, -55, -10, -37, 41, 24, 4, 41, 58, 13, -23, 57, 23, -49, 38, 27, -43, 1, 6, 0, 24, 1, -33, -18, 67, -36, 55, 56, 64, 40, 24, -39, 10, 47, 3, -44, -52, 27, 61, 
  6, -31, -17, 5, 57, -23, -29, -31, 10, -59, -62, -27, 10, 34, -10, 27, -37, -27, 26, -20, -49, -33, 22, -30, 24, -24, -6, 49, -34, 47, 24, 0, 43, -35, -17, -28, 18, -49, -28, 2, 6, -5, 16, 45, 0, -47, 43, -51, -3, -23, 4, -6, -11, -41, -8, -58, -2, -3, 51, -46, -54, 64, -17, -2, -39, 38, 17, -10, 2, 44, -43, -5, -25, 42, 38, 35, -20, 16, -34, 22, 12, 62, -69, -5, 
  -10, 17, 40, 41, 53, -26, -30, 69, 4, -11, -25, 52, -40, 62, -30, -26, -36, 16, 53, -32, 29, -24, -42, 52, -31, -49, -42, 13, -2, -44, -19, -30, 14, 0, -6, 42, 49, -43, 27, -60, -34, 5, 58, -28, 21, -35, 7, 53, -46, 28, -27, -36, 53, 27, 33, -47, 42, -60, -23, -35, 32, -53, 20, 73, -20, 30, -13, 1, 1, 3, 53, -21, 40, 56, 30, 10, -50, -42, 42, -50, -46, -58, -72, 1, 
  -48, -15, 30, -56, 28, 5, -37, -5, -2, -20, -53, -22, -49, -41, -43, -30, 4, -34, -31, 22, -28, 47, -31, 45, -25, -50, -2, -16, -51, -40, 26, -25, -36, -52, 57, 45, 16, -39, -44, -19, -42, 12, -34, 30, 2, -9, 58, 13, -45, -53, 3, -49, 26, -33, 36, -40, -37, -36, -16, 41, -18, -30, -38, 45, 28, -30, 50, -46, 3, 50, 36, 31, 43, -26, -54, 17, 51, 10, -17, 20, 16, 24, 50, -2, 
  -2, 43, 3, -28, -10, -19, 17, -8, 41, 39, -46, 45, 39, -1, -1, -23, -2, -48, -30, 15, -22, -53, 45, -45, -4, 2, -37, -24, 20, 45, -40, 8, 48, -36, 5, 20, -52, 12, 3, -7, -38, -40, 15, 32, 0, -46, -53, 15, -6, 2, 15, 26, -48, 20, 27, -29, 30, -48, -38, 48, -44, 38, -42, 20, -43, -6, -9, -39, -41, -34, -55, 38, -17, -8, -12, 19, -48, -56, -50, -25, 44, -4, -2, -49, 
};
const TfArray<2, int> tensor_dimension6 = { 2, { 20,84 } };
const TfArray<1, float> quant6_scale = { 1, { 0.0041656880639493465, } };
const TfArray<1, int> quant6_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const TfArray<2, int> tensor_dimension7 = { 2, { 1,20 } };
const TfArray<1, float> quant7_scale = { 1, { 0.042221579700708389, } };
const TfArray<1, int> quant7_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const TfArray<2, int> tensor_dimension8 = { 2, { 1,10 } };
const TfArray<1, float> quant8_scale = { 1, { 0.041272174566984177, } };
const TfArray<1, int> quant8_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const TfArray<2, int> tensor_dimension9 = { 2, { 1,3 } };
const TfArray<1, float> quant9_scale = { 1, { 0.043573174625635147, } };
const TfArray<1, int> quant9_zero = { 1, { 8 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const TfArray<2, int> tensor_dimension10 = { 2, { 1,3 } };
const TfArray<1, float> quant10_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant10_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const TfLiteFullyConnectedParams opdata0 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs0 = { 3, { 0,6,5 } };
const TfArray<1, int> outputs0 = { 1, { 7 } };
const TfLiteFullyConnectedParams opdata1 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs1 = { 3, { 7,4,3 } };
const TfArray<1, int> outputs1 = { 1, { 8 } };
const TfLiteFullyConnectedParams opdata2 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs2 = { 3, { 8,2,1 } };
const TfArray<1, int> outputs2 = { 1, { 9 } };
const TfLiteSoftmaxParams opdata3 = { 1 };
const TfArray<1, int> inputs3 = { 1, { 9 } };
const TfArray<1, int> outputs3 = { 1, { 10 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 84, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant1))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 30, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 40, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 80, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 1680, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 96), (TfLiteIntArray*)&g0::tensor_dimension7, 20, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension8, 10, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 16), (TfLiteIntArray*)&g0::tensor_dimension9, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension10, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[4] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[4] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_FULLY_CONNECTED, OP_FULLY_CONNECTED, OP_FULLY_CONNECTED, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 11, };
const size_t tflNodes_subgraph_index[] = {0, 4, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  10, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_3_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 11;
  for (size_t i = 0; i < 11; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_invoke() {
  for (size_t i = 0; i < 4; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
